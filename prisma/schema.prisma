// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Product {
  id           Int            @id @default(autoincrement())
  title        String
  description  String
  price        Float
  rate         Float
  stock        Int
  type         String
  category     String
  addedAt      DateTime       @default(now())
  colors       Color[]
  sizes        Size[]
  images       Image[]
  ProductColor ProductColor[]
  ProductSize  ProductSize[]
}

model Color {
  id           Int            @id @default(autoincrement())
  name         String
  products     Product[]
  ProductColor ProductColor[]
}

model Size {
  id          Int           @id @default(autoincrement())
  name        String
  products    Product[]
  ProductSize ProductSize[]
}

model ProductColor {
  product_id Int
  color_id   Int
  product    Product @relation(fields: [product_id], references: [id])
  color      Color   @relation(fields: [color_id], references: [id])

  @@id([product_id, color_id])
}

model ProductSize {
  product_id Int
  size_id    Int
  product    Product @relation(fields: [product_id], references: [id])
  size       Size    @relation(fields: [size_id], references: [id])

  @@id([product_id, size_id])
}

model Image {
  id         Int     @id @default(autoincrement())
  product_id Int
  url        String
  product    Product @relation(fields: [product_id], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
